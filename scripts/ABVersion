#!/usr/bin/env node

const util = require('util');
const path = require('path');
const readline = require('readline');
const exec = util.promisify(require('child_process').exec);
const { promises: fs, constants: FS_CONSTANTS } = require('fs');

const semver = require('semver');

const identity = (a) => a;
const booleanAnswerCb = (defaultValue = 'y') => (answer) => {
    // default press enter = empty string
    const value = (answer.trim() || defaultValue).toLowerCase();
    return value === defaultValue;
}

/**
 * Check if a file exist,
 * @param  {String}  filePath              Path to a file
 * @param  {Boolean} isFull                We already give a full file path
 * @return {void}
 */
async function hasFile(file, isFull) {
    const filePath = isFull ? file : path.join(process.cwd(), file);
    try {
        await fs.access(filePath, FS_CONSTANTS.F_OK | FS_CONSTANTS.W_OK);
    } catch (e) {
        throw new Error(`You must have the file [${path.basename(filePath)}] to be able to tag`);
    }
}


/**
 * Validate user input
 *   type: type     A/B testing version
 *   type: version  Semver version
 * @param  {String} type  type/version
 * @param  {String} value UserInput value
 */
function validInput(type, value) {
    if (type === 'type' && !/^(a|b|c)$/i.test(value)) {
        throw new Error('Invalid input value. It must be either a or b or c');
    }

    if (type === 'version' && !/major|minor|patch|premajor|preminor|prepatch|prerelease/.test(value)) {
        throw new Error(
            'Invalid input value. We expect major | minor | patch | premajor | preminor | prepatch | prerelease'
        );
    }
}

/**
 * Prompt a quesiton to the user, we return a promise with the answer
 * @param  {String} question
 * @param  {String} question
 * @return {Promise<Boolean>}  Kill on CTRL-C
 */
async function question(question, fomatOutput = booleanAnswerCb()) {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    try {
        const answer = await new Promise((resolve, reject) => {
            rl.question(question, (answer = '') => {
                resolve(fomatOutput(answer));
                rl.close();
            });

            rl.on('close', () => reject());
        });
        return answer;
    } catch (e) {
        // Osef of ctrl+c
        throw new Error((e || {}).message || 'STOP');
    }
}

async function execCommand(cmd, successCb = identity) {
    const { stdout, stderr } = await exec(`${cmd} && echo 'OKAY'`);

    if (/OKAY/.test(stdout)) {
        return successCb((stdout.split('OKAY')[0] || '').trim());
    }

    if (stderr) {
        throw new Error(stderr);
    }
}
async function validateCurrentBranch() {
    const output = await execCommand(`git rev-parse --abbrev-ref HEAD`);
    if (output === 'develop') {
        throw new Error('You must tag only from master. Merge develop inside master then tag');
    }
}

async function writeVersion(newVersion) {
    const rawVersion = newVersion.replace('v', '');

    for (const file of [ 'package.json', 'package-lock.json' ]) {
        const filePath = path.join(process.cwd(), file);
        const buffer = (await fs.readFile(filePath)).toString();
        const pkg = JSON.parse(buffer);
        pkg.version = rawVersion;
        await fs.writeFile(filePath, JSON.stringify(pkg, null, 4));
        console.log(`[run] write new version ${newVersion} to ${file}`);
    }

    await execCommand([
        'git add package.json package-lock.json',
        `git commit -m '${rawVersion}'`,
        'git push origin "$(git rev-parse --abbrev-ref HEAD)"'
    ].join(' && '));

    console.log(`[run] new version available`, newVersion);
}

async function flowStandard(newVersion) {
    await writeVersion(newVersion);
}

async function flowAB({ arg1, arg2: input }, version) {
    const arg2 = input || await question('Which version you want to create? [a/b/c default:a]:', (answer) => {
        // default press enter = empty string
        const value = answer.trim() || 'a';
        return value;
    })

    validInput('type', arg2);

    const newVersion = `${semver.inc(version, arg1)}+${arg2}`;

    if (!semver.valid(newVersion)) {
        throw new Error(`Invalid version ${newVersion}`);
    }

    const confirmCreation = await question(`Confirm new tag ${newVersion} [Yy/Nn]:`);

    if (!confirmCreation) {
        return;
    }

    console.log('[run] create new tag', newVersion);

    return writeVersion(newVersion);
}

async function main() {

    await hasFile('package-lock.json');

    const isStandardVersion = await question('Do you want to create AB testing version [Yy/Nn default: n]:', booleanAnswerCb('n'));

    const { version } = require(path.join(process.cwd(), 'package.json'));
    const [ arg1 = 'patch', arg2 ] = process.argv.slice(2);

    validInput('version', arg1);

    if (!isStandardVersion) {
        return flowAB({ arg1, arg2 }, version);
    }

    await validateCurrentBranch()

    const newVersion = `v${semver.inc(version, arg1)}`;

    if (!semver.valid(newVersion)) {
        throw new Error(`Invalid version ${newVersion}`);
    }

    return flowStandard(newVersion);
}

main().catch((e) => {
    console.error(e);
    if (e.message !== 'STOP') {
        console.log('');
        console.error(`ðŸ”´ ${e.toString()}`);
        process.exit(1);
        console.log('');
    }

});
