#!/usr/bin/env node

/*
    Command to replace default npm version, it provides the same API but
    is able to create a A/B testing tag.
        + test if you try to tag from the branch develop, to stop you
        + test if you have the lockfile. No tag without it !!!

    1. "version": "./node_modules/proton-bundler/scripts/ABVersion",
    2. Add semver as a dependency

    VoilÃ , now you can use it.
 */

const util = require('util');
const path = require('path');
const readline = require('readline');
const exec = util.promisify(require('child_process').exec);
const { promises: fs, constants: FS_CONSTANTS } = require('fs');

const semver = require('semver');

const ARGS = process.argv.slice(2);
const IS_VERBOSE = ARGS.includes('--verbose');

const identity = (a) => a;
const booleanAnswerCb = (defaultValue = 'y') => (answer) => {
    // default press enter = empty string
    const value = (answer.trim() || defaultValue).toLowerCase();
    return value === defaultValue;
};

/**
 * Check if a file exist,
 * @param  {String}  filePath              Path to a file
 * @param  {Boolean} isFull                We already give a full file path
 * @return {void}
 */
async function hasFile(file, isFull) {
    const filePath = isFull ? file : path.join(process.cwd(), file);
    try {
        await fs.access(filePath, FS_CONSTANTS.F_OK | FS_CONSTANTS.W_OK);
    } catch (e) {
        throw new Error(`You must have the file [${path.basename(filePath)}] to be able to tag`);
    }
}

/**
 * Validate user input
 *   type: type     A/B testing version
 *   type: version  Semver version
 * @param  {String} type  type/version
 * @param  {String} value UserInput value
 */
function validInput(type, value) {
    if (type === 'type' && !value) {
        throw new Error('Invalid input value. You must set a value');
    }

    if (type === 'version' && !/major|minor|patch|premajor|preminor|prepatch|prerelease/.test(value)) {
        throw new Error(
            'Invalid input value. We expect major | minor | patch | premajor | preminor | prepatch | prerelease'
        );
    }
}

/**
 * Prompt a quesiton to the user, we return a promise with the answer
 * @param  {String} question
 * @param  {String} question
 * @return {Promise<Boolean>}  Kill on CTRL-C
 */
async function question(question, fomatOutput = booleanAnswerCb()) {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    try {
        const answer = await new Promise((resolve, reject) => {
            rl.question(question, (answer = '') => {
                resolve(fomatOutput(answer));
                rl.close();
            });

            rl.on('close', () => reject());
        });
        return answer;
    } catch (e) {
        // Osef of ctrl+c
        throw new Error((e || {}).message || 'STOP');
    }
}

async function execCommand(cmd, successCb = identity) {
    const { stdout, stderr } = await exec(`${cmd} && echo 'OKAY'`);

    if (/OKAY/.test(stdout)) {
        return successCb((stdout.split('OKAY')[0] || '').trim());
    }

    if (stderr) {
        throw new Error(stderr);
    }
}
async function validateCurrentBranch() {
    const output = await execCommand('git rev-parse --abbrev-ref HEAD');
    if (output === 'develop') {
        throw new Error('You must tag only from master. Merge develop inside master then tag');
    }
}

/**
 * Write a new version to package.json + lockfile (FS + GIT)
 * @param  {String} newVersion new tag
 * @return {void}
 */
async function writeVersion(newVersion) {
    const rawVersion = newVersion.replace('v', '');

    for (const file of ['package.json', 'package-lock.json']) {
        const filePath = path.join(process.cwd(), file);
        const buffer = (await fs.readFile(filePath)).toString();
        const pkg = JSON.parse(buffer);
        pkg.version = rawVersion;
        await fs.writeFile(filePath, JSON.stringify(pkg, null, 4));
        console.log(`[run] write new version ${newVersion} to ${file}`);
    }

    await execCommand(
        [
            'git add package.json package-lock.json',
            `git commit -m '${rawVersion}'`,
            'git push origin "$(git rev-parse --abbrev-ref HEAD)"'
        ].join(' && ')
    );
    console.log('[run] create and push commit');

    await execCommand(
        [
            `git tag ${newVersion} -m ${rawVersion}`,
            `git push origin ${newVersion}`
        ].join(' && ')
    );
    console.log('[run] create a new tag and push the tag');

    console.log('[run] new version available', newVersion);
}

async function flowStandard(newVersion) {
    await writeVersion(newVersion);
    process.exit(0);
}

async function flowAB({ arg1, arg2: input }, version) {
    const arg2 =
        input ||
        (await question('Which flavor you want to create? [default:a]:', (answer) => {
            // default press enter = empty string
            const value = answer.trim() || 'a';
            return value;
        }));

    validInput('type', arg2);

    const newVersion = `v${semver.inc(version, arg1)}-${arg2}`;

    if (!semver.valid(newVersion)) {
        throw new Error(`Invalid version ${newVersion}`);
    }

    const doIncrement = await question(
        [
            '',
            `[1]: We increment the tag from v${version} to ${newVersion}`,
            `[2]: We only add the A/B version marker to the tag v${version} to v${version}+${arg2}`,
            '',
            'What is your choice [default: 1]:'
        ].join('\n'),
        booleanAnswerCb('1')
    );

    const newTag = doIncrement ? newVersion : `v${version}+${arg2}`;
    const confirmCreation = await question(`Confirm new tag ${newTag} [Yy/Nn default: y]:`);

    if (!confirmCreation) {
        return console.log('[run] ciao');
    }

    console.log('[run] create new tag', newTag);

    await writeVersion(newVersion);
    process.exit(0);
}

async function validateCommand() {
    const [ arg1 ] = Array.from(JSON.parse(process.env.npm_config_argv || '{}').original || []);

    if (arg1 !== 'run') {

        await execCommand(
            [
                'git reset package.json package-lock.json',
                'git checkout package.json',
                'git checkout package-lock.json || true'
            ].join(' && ')
        );
        const error = new Error('You must run this command with [npm run version]');
        error.about = [
            'Why? (â˜žï¾Ÿâˆ€ï¾Ÿ)â˜ž',
            'It is because [npm version] is impossible to extend, while via [npm run version] it works perfectly.',
            '[npm version] always commit and there is no option to disable this behavior.',
            'We want to ship only one command, not many keys inside the package.json.',
            'The most simple fix is to use [npm run version] as it will not commit by itself',
            'The config from npm gives use some keys: commit-hook/git-tag-version sadly, both are not able to solve this issue.'
        ].join('\n');
        throw error;
    }
}

async function main() {

    await validateCommand();
    await hasFile('package-lock.json');
    await validateCurrentBranch(); // We don't want to tag from develop

    const [arg1 = 'patch', arg2] = ARGS.filter((arg) => !arg.startsWith('--'));
    validInput('version', arg1);

    const isStandardVersion = arg2 ? false : await question(
        'Do you want to create AB testing version [Yy/Nn default: n]:',
        booleanAnswerCb('n')
    );

    const { version } = require(path.join(process.cwd(), 'package.json'));

    if (!isStandardVersion) {
        return flowAB({ arg1, arg2 }, version);
    }


    const newVersion = `v${semver.inc(version, arg1)}`;

    if (!semver.valid(newVersion)) {
        throw new Error(`Invalid version ${newVersion}`);
    }

    return flowStandard(newVersion);
}

main().catch((e) => {

    if (IS_VERBOSE) {
        console.error(e);
        console.log('');
        process.exit(1);
    }

    if (e.message !== 'STOP') {
        console.log('');
        console.error(`ðŸ”´ ${e.toString()}`);
        e.about && console.log(`\n${e.about}\n\n`);
        console.log('');
        process.exit(1);
    }
});
